[
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "wave",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wave",
        "description": "wave",
        "detail": "wave",
        "documentation": {}
    },
    {
        "label": "altair",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "altair",
        "description": "altair",
        "detail": "altair",
        "documentation": {}
    },
    {
        "label": "IPython.display",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "IPython.display",
        "description": "IPython.display",
        "detail": "IPython.display",
        "documentation": {}
    },
    {
        "label": "librosa",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "librosa",
        "description": "librosa",
        "detail": "librosa",
        "documentation": {}
    },
    {
        "label": "librosa.display",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "librosa.display",
        "description": "librosa.display",
        "detail": "librosa.display",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "pylab",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pylab",
        "description": "pylab",
        "detail": "pylab",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "write",
        "importPath": "scipy.io.wavfile",
        "description": "scipy.io.wavfile",
        "isExtraImport": true,
        "detail": "scipy.io.wavfile",
        "documentation": {}
    },
    {
        "label": "write",
        "importPath": "scipy.io.wavfile",
        "description": "scipy.io.wavfile",
        "isExtraImport": true,
        "detail": "scipy.io.wavfile",
        "documentation": {}
    },
    {
        "label": "write",
        "importPath": "scipy.io.wavfile",
        "description": "scipy.io.wavfile",
        "isExtraImport": true,
        "detail": "scipy.io.wavfile",
        "documentation": {}
    },
    {
        "label": "find_peaks",
        "importPath": "scipy.signal",
        "description": "scipy.signal",
        "isExtraImport": true,
        "detail": "scipy.signal",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "wavfile",
        "importPath": "scipy.io",
        "description": "scipy.io",
        "isExtraImport": true,
        "detail": "scipy.io",
        "documentation": {}
    },
    {
        "label": "wavfile",
        "importPath": "scipy.io",
        "description": "scipy.io",
        "isExtraImport": true,
        "detail": "scipy.io",
        "documentation": {}
    },
    {
        "label": "wavfile",
        "importPath": "scipy.io",
        "description": "scipy.io",
        "isExtraImport": true,
        "detail": "scipy.io",
        "documentation": {}
    },
    {
        "label": "wavfile",
        "importPath": "scipy.io",
        "description": "scipy.io",
        "isExtraImport": true,
        "detail": "scipy.io",
        "documentation": {}
    },
    {
        "label": "wavfile",
        "importPath": "scipy.io",
        "description": "scipy.io",
        "isExtraImport": true,
        "detail": "scipy.io",
        "documentation": {}
    },
    {
        "label": "fftshift",
        "importPath": "scipy.fft",
        "description": "scipy.fft",
        "isExtraImport": true,
        "detail": "scipy.fft",
        "documentation": {}
    },
    {
        "label": "fft",
        "importPath": "scipy.fft",
        "description": "scipy.fft",
        "isExtraImport": true,
        "detail": "scipy.fft",
        "documentation": {}
    },
    {
        "label": "irfft",
        "importPath": "scipy.fft",
        "description": "scipy.fft",
        "isExtraImport": true,
        "detail": "scipy.fft",
        "documentation": {}
    },
    {
        "label": "fftshift",
        "importPath": "scipy.fft",
        "description": "scipy.fft",
        "isExtraImport": true,
        "detail": "scipy.fft",
        "documentation": {}
    },
    {
        "label": "fft",
        "importPath": "scipy.fft",
        "description": "scipy.fft",
        "isExtraImport": true,
        "detail": "scipy.fft",
        "documentation": {}
    },
    {
        "label": "irfft",
        "importPath": "scipy.fft",
        "description": "scipy.fft",
        "isExtraImport": true,
        "detail": "scipy.fft",
        "documentation": {}
    },
    {
        "label": "rfft",
        "importPath": "scipy.fft",
        "description": "scipy.fft",
        "isExtraImport": true,
        "detail": "scipy.fft",
        "documentation": {}
    },
    {
        "label": "rfftfreq",
        "importPath": "scipy.fft",
        "description": "scipy.fft",
        "isExtraImport": true,
        "detail": "scipy.fft",
        "documentation": {}
    },
    {
        "label": "irfft",
        "importPath": "scipy.fft",
        "description": "scipy.fft",
        "isExtraImport": true,
        "detail": "scipy.fft",
        "documentation": {}
    },
    {
        "label": "fft",
        "importPath": "scipy.fft",
        "description": "scipy.fft",
        "isExtraImport": true,
        "detail": "scipy.fft",
        "documentation": {}
    },
    {
        "label": "fftshift",
        "importPath": "scipy.fft",
        "description": "scipy.fft",
        "isExtraImport": true,
        "detail": "scipy.fft",
        "documentation": {}
    },
    {
        "label": "fftshift",
        "importPath": "scipy.fft",
        "description": "scipy.fft",
        "isExtraImport": true,
        "detail": "scipy.fft",
        "documentation": {}
    },
    {
        "label": "fft",
        "importPath": "scipy.fft",
        "description": "scipy.fft",
        "isExtraImport": true,
        "detail": "scipy.fft",
        "documentation": {}
    },
    {
        "label": "irfft",
        "importPath": "scipy.fft",
        "description": "scipy.fft",
        "isExtraImport": true,
        "detail": "scipy.fft",
        "documentation": {}
    },
    {
        "label": "functions",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functions",
        "description": "functions",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "animation",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "animation",
        "description": "animation",
        "detail": "animation",
        "documentation": {}
    },
    {
        "label": "scipy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "scipy",
        "description": "scipy",
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "streamlit.components.v1",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit.components.v1",
        "description": "streamlit.components.v1",
        "detail": "streamlit.components.v1",
        "documentation": {}
    },
    {
        "label": "HIDDEN",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "numpy.fft",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.fft",
        "description": "numpy.fft",
        "detail": "numpy.fft",
        "documentation": {}
    },
    {
        "label": "plotly_express",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly_express",
        "description": "plotly_express",
        "detail": "plotly_express",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "variabl",
        "kind": 6,
        "importPath": "animation",
        "description": "animation",
        "peekOfCode": "class variabls :\n    points_num =1000\n    count=0\n# Plot a Chart\ndef plot_animation(df):\n    brush = alt.selection_interval()\n    lines = alt.Chart(df).mark_line().encode(\n        x=alt.X('time', axis=alt.Axis(title='time')),\n        y=alt.Y('amplitude', axis=alt.Axis(title='amplitude')),\n    ).properties(",
        "detail": "animation",
        "documentation": {}
    },
    {
        "label": "plot_animation",
        "kind": 2,
        "importPath": "animation",
        "description": "animation",
        "peekOfCode": "def plot_animation(df):\n    brush = alt.selection_interval()\n    lines = alt.Chart(df).mark_line().encode(\n        x=alt.X('time', axis=alt.Axis(title='time')),\n        y=alt.Y('amplitude', axis=alt.Axis(title='amplitude')),\n    ).properties(\n        width=500,\n        height=200\n    ).add_selection(\n        brush).interactive()",
        "detail": "animation",
        "documentation": {}
    },
    {
        "label": "modes",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "modes = [\"Normal\", \"Music\", \"Vowels\", \"Biological Abnormalities\"]\nmode = st.sidebar.selectbox(\"Select Mode\", modes)\nuploaded_file = st.sidebar.file_uploader(\"Select a signal file\", type=[\"wav\", \"csv\"])\nif uploaded_file is not None:\n    name = uploaded_file.name\n    type = uploaded_file.type\n    if fn.validate_file_type(name, [\"wav\"]):\n        # Load wav file\n        signal = fn.load_signal(uploaded_file)\n    elif fn.validate_file_type(name, [\"csv\"]):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "mode",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "mode = st.sidebar.selectbox(\"Select Mode\", modes)\nuploaded_file = st.sidebar.file_uploader(\"Select a signal file\", type=[\"wav\", \"csv\"])\nif uploaded_file is not None:\n    name = uploaded_file.name\n    type = uploaded_file.type\n    if fn.validate_file_type(name, [\"wav\"]):\n        # Load wav file\n        signal = fn.load_signal(uploaded_file)\n    elif fn.validate_file_type(name, [\"csv\"]):\n        # Load csv file",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "uploaded_file",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "uploaded_file = st.sidebar.file_uploader(\"Select a signal file\", type=[\"wav\", \"csv\"])\nif uploaded_file is not None:\n    name = uploaded_file.name\n    type = uploaded_file.type\n    if fn.validate_file_type(name, [\"wav\"]):\n        # Load wav file\n        signal = fn.load_signal(uploaded_file)\n    elif fn.validate_file_type(name, [\"csv\"]):\n        # Load csv file\n        # ...",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "modes",
        "kind": 5,
        "importPath": "app2",
        "description": "app2",
        "peekOfCode": "modes = [\"Normal\", \"Music\", \"Vowels\", \"Biological Abnormalities\"]\nmode = st.sidebar.selectbox(\"Select Mode\", modes)\nuploaded_file = st.sidebar.file_uploader(\"Select a signal file\", type=[\"wav\", \"csv\"])\nif uploaded_file is not None:\n    name = uploaded_file.name\n    type = uploaded_file.type\n    path = os.path.join(\"temp\", uploaded_file.name)\n    if fn.validate_file_type(name, [\"wav\"]):\n        # Load wav file\n        signal = fn.load_signal(uploaded_file)",
        "detail": "app2",
        "documentation": {}
    },
    {
        "label": "mode",
        "kind": 5,
        "importPath": "app2",
        "description": "app2",
        "peekOfCode": "mode = st.sidebar.selectbox(\"Select Mode\", modes)\nuploaded_file = st.sidebar.file_uploader(\"Select a signal file\", type=[\"wav\", \"csv\"])\nif uploaded_file is not None:\n    name = uploaded_file.name\n    type = uploaded_file.type\n    path = os.path.join(\"temp\", uploaded_file.name)\n    if fn.validate_file_type(name, [\"wav\"]):\n        # Load wav file\n        signal = fn.load_signal(uploaded_file)\n    elif fn.validate_file_type(name, [\"csv\"]):",
        "detail": "app2",
        "documentation": {}
    },
    {
        "label": "uploaded_file",
        "kind": 5,
        "importPath": "app2",
        "description": "app2",
        "peekOfCode": "uploaded_file = st.sidebar.file_uploader(\"Select a signal file\", type=[\"wav\", \"csv\"])\nif uploaded_file is not None:\n    name = uploaded_file.name\n    type = uploaded_file.type\n    path = os.path.join(\"temp\", uploaded_file.name)\n    if fn.validate_file_type(name, [\"wav\"]):\n        # Load wav file\n        signal = fn.load_signal(uploaded_file)\n    elif fn.validate_file_type(name, [\"csv\"]):\n        # Load csv file",
        "detail": "app2",
        "documentation": {}
    },
    {
        "label": "fourierTansformWave",
        "kind": 2,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "def fourierTansformWave(audio=[], sampfreq=44100):\n    try:\n        audio = audio[:, 0]\n    except:\n        audio = audio[:]\n    #  Fourier transform\n    fourier_transform_magnitude = rfft(audio)\n    fourier_transform_freq = rfftfreq(len(audio), 1 / sampfreq)\n    return fourier_transform_magnitude, fourier_transform_freq\ndef modify_wave(",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "modify_wave",
        "kind": 2,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "def modify_wave(\n    magnitude=[], numPoints=0, startIndex=0, scalerNumber=[], sliders_num=0\n):\n    for i in range(sliders_num):\n        magnitude[startIndex[i] : numPoints[i] + startIndex[i]] *= scalerNumber[i]\n    return magnitude\n# --------------------------------------------- bands -------------------------------------------\ndef bandLength(freq=[]):\n    length_band = len(freq) / 10\n    arr = np.zeros(10)",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "bandLength",
        "kind": 2,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "def bandLength(freq=[]):\n    length_band = len(freq) / 10\n    arr = np.zeros(10)\n    for i in range(10):\n        arr[i] = int(i * length_band)\n    return arr, len(freq) / 10  #\ndef Vowels(points_per_freq, sliders, frequencies, fourier_frequency):\n    vowel = [\"sh\", \"M\", \"D\", \"R\"]\n    for i in range(len(frequencies)):\n        # print(frequencies[i][i])",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "Vowels",
        "kind": 2,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "def Vowels(points_per_freq, sliders, frequencies, fourier_frequency):\n    vowel = [\"sh\", \"M\", \"D\", \"R\"]\n    for i in range(len(frequencies)):\n        # print(frequencies[i][i])\n        for j in range(len(frequencies[i])):\n            # print(vowel[i],frequencies[i][j][0])\n            # print(vowel[i],frequencies[i][j][1])\n            signal = fourier_frequency[\n                int(points_per_freq * frequencies[i][j][0]) : int(\n                    points_per_freq * frequencies[i][j][1]",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "vertical_slider",
        "kind": 2,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "def vertical_slider(value, step, min=min, max=max, key=None):\n    slider_value = _vertical_slider(\n        value=value, step=step, min=min, max=max, key=key, default=value\n    )\n    return slider_value\ndef creating_new_slider(label):\n    columns = st.columns(len(label))\n    sliders_values = []\n    for index in range(len(label)):\n        with columns[index]:",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "creating_new_slider",
        "kind": 2,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "def creating_new_slider(label):\n    columns = st.columns(len(label))\n    sliders_values = []\n    for index in range(len(label)):\n        with columns[index]:\n            slider = vertical_slider(1, step=1, min=0, max=5, key=index)\n            sliders_values.append(slider)\n            st.write(label[index])\n    return sliders_values\ndef load_signal(file_path):",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "load_signal",
        "kind": 2,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "def load_signal(file_path):\n    sampling_rate, signal = wavfile.read(file_path)\n    return signal\ndef read_audio(audio_file):\n    obj = wave.open(audio_file, 'r')\n    sample_rate   = obj.getframerate()                           # number of samples per second\n    n_samples     = obj.getnframes()                             # total number of samples in the whole audio\n    signal_wave   = obj.readframes(-1)                           # amplitude of the sound\n    duration      = n_samples / sample_rate                      # duration of the audio file\n    sound_info    = pylab.fromstring(signal_wave, 'int16')",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "read_audio",
        "kind": 2,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "def read_audio(audio_file):\n    obj = wave.open(audio_file, 'r')\n    sample_rate   = obj.getframerate()                           # number of samples per second\n    n_samples     = obj.getnframes()                             # total number of samples in the whole audio\n    signal_wave   = obj.readframes(-1)                           # amplitude of the sound\n    duration      = n_samples / sample_rate                      # duration of the audio file\n    sound_info    = pylab.fromstring(signal_wave, 'int16')\n    signal_y_axis = np.frombuffer(signal_wave, dtype=np.int16)\n    signal_x_axis = np.linspace(0, duration, len(signal_y_axis))\n    return signal_x_axis, signal_y_axis, sample_rate,  sound_info",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "validate_file_type",
        "kind": 2,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "def validate_file_type(file_name, allowed_types):\n    ext = os.path.splitext(file_name)[1][1:].lower()\n    return ext in allowed_types\ndef apply_equalizer(signal, slider_values):\n    modified_signal = signal.copy()\n    # Implement the logic to modify the signal based on the slider values\n    # You can use libraries like scipy or create your own algorithm\n    return modified_signal\ndef mode_conditions(mode, signal):\n    modified_signal = signal.copy()",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "apply_equalizer",
        "kind": 2,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "def apply_equalizer(signal, slider_values):\n    modified_signal = signal.copy()\n    # Implement the logic to modify the signal based on the slider values\n    # You can use libraries like scipy or create your own algorithm\n    return modified_signal\ndef mode_conditions(mode, signal):\n    modified_signal = signal.copy()\n    if mode == \"Normal\":\n        # Implement Normal mode conditions\n        pass",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "mode_conditions",
        "kind": 2,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "def mode_conditions(mode, signal):\n    modified_signal = signal.copy()\n    if mode == \"Normal\":\n        # Implement Normal mode conditions\n        pass\n    elif mode == \"Music\":\n        # Implement Music mode conditions\n        pass\n    elif mode == \"Vowels\":\n        # Implement Vowels mode conditions",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "welcome_screen",
        "kind": 2,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "def welcome_screen():\n    st.markdown(\n        \"\"\"\n        <style>\n        .title {\n            color: #FF5733;\n            font-size: 30px;\n            margin-bottom: 20px;\n        }\n        .team-members {",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "parent_dir",
        "kind": 5,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "parent_dir = os.path.dirname(os.path.abspath(__file__))\nbuild_dir = os.path.join(parent_dir, \"build\")\n_vertical_slider = components.declare_component(\"vertical_slider\", path=build_dir)\ndef fourierTansformWave(audio=[], sampfreq=44100):\n    try:\n        audio = audio[:, 0]\n    except:\n        audio = audio[:]\n    #  Fourier transform\n    fourier_transform_magnitude = rfft(audio)",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "build_dir",
        "kind": 5,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "build_dir = os.path.join(parent_dir, \"build\")\n_vertical_slider = components.declare_component(\"vertical_slider\", path=build_dir)\ndef fourierTansformWave(audio=[], sampfreq=44100):\n    try:\n        audio = audio[:, 0]\n    except:\n        audio = audio[:]\n    #  Fourier transform\n    fourier_transform_magnitude = rfft(audio)\n    fourier_transform_freq = rfftfreq(len(audio), 1 / sampfreq)",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "_vertical_slider",
        "kind": 5,
        "importPath": "functions",
        "description": "functions",
        "peekOfCode": "_vertical_slider = components.declare_component(\"vertical_slider\", path=build_dir)\ndef fourierTansformWave(audio=[], sampfreq=44100):\n    try:\n        audio = audio[:, 0]\n    except:\n        audio = audio[:]\n    #  Fourier transform\n    fourier_transform_magnitude = rfft(audio)\n    fourier_transform_freq = rfftfreq(len(audio), 1 / sampfreq)\n    return fourier_transform_magnitude, fourier_transform_freq",
        "detail": "functions",
        "documentation": {}
    },
    {
        "label": "numpoints",
        "kind": 5,
        "importPath": "plots",
        "description": "plots",
        "peekOfCode": "numpoints = []\nstartIndex =[]\nsamplfreq=0\noutput_lines=any\noptional =  False\n# -------------------------------------------------------------------------------------------------------------#\nif \"size\" not in st.session_state:\n    st.session_state['size'] = 0\nif \"counter\" not in st.session_state:\n    st.session_state['counter'] = 0",
        "detail": "plots",
        "documentation": {}
    },
    {
        "label": "optional",
        "kind": 5,
        "importPath": "plots",
        "description": "plots",
        "peekOfCode": "optional =  False\n# -------------------------------------------------------------------------------------------------------------#\nif \"size\" not in st.session_state:\n    st.session_state['size'] = 0\nif \"counter\" not in st.session_state:\n    st.session_state['counter'] = 0\nif \"btn_state\" not in st.session_state:\n    st.session_state['btn_state'] = 0\nst.sidebar.title(\"Select Mode\")\nmodes = [\"Normal\", \"Music\", \"Vowels\", \"Biological Abnormalities\"]",
        "detail": "plots",
        "documentation": {}
    },
    {
        "label": "modes",
        "kind": 5,
        "importPath": "plots",
        "description": "plots",
        "peekOfCode": "modes = [\"Normal\", \"Music\", \"Vowels\", \"Biological Abnormalities\"]\nmode = st.sidebar.selectbox(\"Select Mode\", modes)\nuploaded_file = st.sidebar.file_uploader(\"Select a signal file\", type=[\"wav\", \"csv\"])\nif uploaded_file is not None:\n    name = uploaded_file.name\n    type = uploaded_file.type\n    if fn.validate_file_type(name, [\"wav\"]):\n        # Load wav file\n        signal = fn.load_signal(uploaded_file)\n    elif fn.validate_file_type(name, [\"csv\"]):",
        "detail": "plots",
        "documentation": {}
    },
    {
        "label": "mode",
        "kind": 5,
        "importPath": "plots",
        "description": "plots",
        "peekOfCode": "mode = st.sidebar.selectbox(\"Select Mode\", modes)\nuploaded_file = st.sidebar.file_uploader(\"Select a signal file\", type=[\"wav\", \"csv\"])\nif uploaded_file is not None:\n    name = uploaded_file.name\n    type = uploaded_file.type\n    if fn.validate_file_type(name, [\"wav\"]):\n        # Load wav file\n        signal = fn.load_signal(uploaded_file)\n    elif fn.validate_file_type(name, [\"csv\"]):\n        # Load csv file",
        "detail": "plots",
        "documentation": {}
    },
    {
        "label": "uploaded_file",
        "kind": 5,
        "importPath": "plots",
        "description": "plots",
        "peekOfCode": "uploaded_file = st.sidebar.file_uploader(\"Select a signal file\", type=[\"wav\", \"csv\"])\nif uploaded_file is not None:\n    name = uploaded_file.name\n    type = uploaded_file.type\n    if fn.validate_file_type(name, [\"wav\"]):\n        # Load wav file\n        signal = fn.load_signal(uploaded_file)\n    elif fn.validate_file_type(name, [\"csv\"]):\n        # Load csv file\n        # ...",
        "detail": "plots",
        "documentation": {}
    }
]